# HULK Compiler Enhanced - Makefile optimizado para MSYS2
# Soporte completo para LLVM en entorno MSYS2/MinGW

# Detect environment
ifeq ($(MSYSTEM),MINGW64)
    # Estamos en MSYS2 MinGW64
    detected_ENV := MSYS2
    EXE_EXT := .exe
    LLVM_CONFIG := llvm-config
    LLVM_DIR := $(shell llvm-config --prefix 2>/dev/null)
    HAS_LLVM := $(shell command -v llvm-config >/dev/null 2>&1 && echo 1 || echo 0)
else ifeq ($(OS),Windows_NT)
    # Windows nativo (PowerShell/CMD)
    detected_ENV := Windows
    EXE_EXT := .exe
    LLVM_DIR ?= C:/msys64/mingw64
    LLVM_CONFIG := $(LLVM_DIR)/bin/llvm-config.exe
    HAS_LLVM := $(shell if exist "$(LLVM_CONFIG)" (echo 1) else (echo 0))
else
    # Unix-like systems
    detected_ENV := Unix
    EXE_EXT := 
    LLVM_CONFIG := llvm-config
    HAS_LLVM := $(shell which llvm-config 2>/dev/null && echo 1 || echo 0)
endif

# Compiler configuration
ifeq ($(HAS_LLVM),1)
    # LLVM available - enable full features
    CXX := clang++
    CC := clang
    ENABLE_LLVM := 1
    LLVM_CXXFLAGS := $(shell $(LLVM_CONFIG) --cxxflags)
    LLVM_LDFLAGS := $(shell $(LLVM_CONFIG) --ldflags --libs core)
    CXXFLAGS = -std=c++17 -Wall -Wextra -I src -DENABLE_LLVM=1 $(LLVM_CXXFLAGS)
    LDFLAGS = $(LLVM_LDFLAGS)
    $(info ‚úÖ LLVM encontrado: $(shell $(LLVM_CONFIG) --version))
    $(info üìÇ LLVM_DIR: $(LLVM_DIR))
else
    # Fallback to GCC without LLVM
    CXX := g++
    CC := gcc
    ENABLE_LLVM := 0
    CXXFLAGS = -std=c++17 -Wall -Wextra -I src -DENABLE_LLVM=0
    LDFLAGS = 
    $(info ‚ö†Ô∏è  LLVM no encontrado - compilando sin soporte LLVM)
endif

# Build tools
FLEX := flex
BISON := bison

# Basic flags
CFLAGS = -std=c99 -Wall -Wextra

# Source files
LEXER_SRC = src/Lexer/lexer.l
PARSER_SRC = src/Parser/parser.y
MAIN_SRC = src/main.cpp
RUNTIME_SRC = src/Runtime/hulk_runtime.c

# Generated files
LEXER_GEN = src/Lexer/lex.yy.cpp
PARSER_GEN_CPP = src/Parser/parser.tab.cpp
PARSER_GEN_HPP = src/Parser/parser.tab.hpp

# Source directories
AST_SOURCES = $(wildcard src/AST/*.cpp)
EVALUATOR_SOURCES = $(wildcard src/Evaluator/*.cpp)
PRINTVISITOR_SOURCES = $(wildcard src/PrintVisitor/*.cpp)
VALUE_SOURCES = $(wildcard src/Value/*.cpp)
SCOPE_SOURCES = $(wildcard src/Scope/*.cpp)
SEMANTIC_SOURCES = $(wildcard src/Semantic/*.cpp)
CODEGEN_SOURCES = $(wildcard src/CodeGen/*.cpp)

# Object files
PARSER_OBJ = $(PARSER_GEN_CPP:.cpp=.o)
LEXER_OBJ = $(LEXER_GEN:.cpp=.o)
MAIN_OBJ = $(MAIN_SRC:.cpp=.o)
RUNTIME_OBJ = $(RUNTIME_SRC:.c=.o)

AST_OBJS = $(AST_SOURCES:.cpp=.o)
EVALUATOR_OBJS = $(EVALUATOR_SOURCES:.cpp=.o)
PRINTVISITOR_OBJS = $(PRINTVISITOR_SOURCES:.cpp=.o)
VALUE_OBJS = $(VALUE_SOURCES:.cpp=.o)
SCOPE_OBJS = $(SCOPE_SOURCES:.cpp=.o)
SEMANTIC_OBJS = $(SEMANTIC_SOURCES:.cpp=.o)
CODEGEN_OBJS = $(CODEGEN_SOURCES:.cpp=.o)

ALL_OBJS = $(PARSER_OBJ) $(LEXER_OBJ) $(MAIN_OBJ) $(RUNTIME_OBJ) \
           $(AST_OBJS) $(EVALUATOR_OBJS) $(PRINTVISITOR_OBJS) \
           $(VALUE_OBJS) $(SCOPE_OBJS) $(SEMANTIC_OBJS)

# Add CodeGen objects only if LLVM is available
ifeq ($(ENABLE_LLVM),1)
    ALL_OBJS += $(CODEGEN_OBJS)
endif

# Output
BIN_DIR = hulk
EXECUTABLE = $(BIN_DIR)/hulk_compiler$(EXE_EXT)

# Colors for output (MSYS2 compatible)
RED := \033[31m
GREEN := \033[32m
YELLOW := \033[33m
BLUE := \033[34m
CYAN := \033[36m
RESET := \033[0m

# Default target
all: info compile

# Show build information
info:
	@echo "$(CYAN)üî® HULK Compiler Build System$(RESET)"
	@echo "$(BLUE)üìç Entorno: $(detected_ENV)$(RESET)"
	@echo "$(BLUE)üîß Compilador: $(CXX)$(RESET)"
ifeq ($(ENABLE_LLVM),1)
	@echo "$(GREEN)‚ö° LLVM: Habilitado ($(shell $(LLVM_CONFIG) --version))$(RESET)"
	@echo "$(GREEN)üìÇ LLVM_DIR: $(LLVM_DIR)$(RESET)"
else
	@echo "$(YELLOW)‚ö†Ô∏è  LLVM: Deshabilitado$(RESET)"
endif
	@echo "$(BLUE)üéØ Objetivo: $(EXECUTABLE)$(RESET)"

# Check environment for MSYS2
check-env:
	@echo "$(CYAN)üîç Verificando entorno...$(RESET)"
ifeq ($(detected_ENV),MSYS2)
	@echo "$(GREEN)‚úÖ MSYS2 MinGW64 detectado$(RESET)"
	@which clang++ || echo "$(RED)‚ùå clang++ no encontrado$(RESET)"
	@which llvm-config || echo "$(RED)‚ùå llvm-config no encontrado$(RESET)"
else
	@echo "$(YELLOW)‚ö†Ô∏è  No est√°s en MSYS2. Para mejor soporte, usa: MSYS2 MinGW 64-bit$(RESET)"
endif

# Install LLVM via MSYS2 (only works from MSYS2 terminal)
install-llvm-msys2:
ifeq ($(detected_ENV),MSYS2)
	@echo "$(BLUE)üì¶ Instalando LLVM en MSYS2...$(RESET)"
	pacman -S --noconfirm mingw-w64-x86_64-llvm mingw-w64-x86_64-clang
	@echo "$(GREEN)‚úÖ LLVM instalado. Ejecuta 'make clean && make' para recompilar$(RESET)"
else
	@echo "$(RED)‚ùå Este comando solo funciona desde MSYS2 MinGW 64-bit terminal$(RESET)"
	@echo "$(YELLOW)üí° Ejecuta el script: ./scripts/install-llvm-msys2.ps1$(RESET)"
endif

# Create bin directory
$(BIN_DIR):
	@mkdir -p $(BIN_DIR)

# Generate parser
$(PARSER_GEN_CPP) $(PARSER_GEN_HPP): $(PARSER_SRC)
	@echo "$(BLUE)üîß Generando parser...$(RESET)"
	$(BISON) -d -o $(PARSER_GEN_CPP) $(PARSER_SRC)

# Generate lexer
$(LEXER_GEN): $(LEXER_SRC) $(PARSER_GEN_HPP)
	@echo "$(BLUE)üîß Generando lexer...$(RESET)"
	$(FLEX) -o $(LEXER_GEN) $(LEXER_SRC)

# Compile C++ files
%.o: %.cpp
	@echo "$(BLUE)üî® Compilando $(notdir $<)...$(RESET)"
	$(CXX) $(CXXFLAGS) -c $< -o $@

# Compile C files
%.o: %.c
	@echo "$(BLUE)üî® Compilando $(notdir $<)...$(RESET)"
	$(CC) $(CFLAGS) -c $< -o $@

# Link executable
$(EXECUTABLE): $(BIN_DIR) $(ALL_OBJS)
	@echo "$(CYAN)üîó Enlazando ejecutable...$(RESET)"
	$(CXX) $(ALL_OBJS) -o $(EXECUTABLE) $(LDFLAGS)
	@echo "$(GREEN)‚úÖ Compilaci√≥n exitosa: $(EXECUTABLE)$(RESET)"

# Main compilation target
compile: $(EXECUTABLE)

# Test compilation
test: compile
	@echo "$(CYAN)üß™ Ejecutando prueba b√°sica...$(RESET)"
	@if [ -f "script.hulk" ]; then \
		./$(EXECUTABLE) script.hulk; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  script.hulk no encontrado$(RESET)"; \
	fi

# Clean generated files
clean:
	@echo "$(YELLOW)üßπ Limpiando archivos generados...$(RESET)"
	rm -f $(LEXER_GEN) $(PARSER_GEN_CPP) $(PARSER_GEN_HPP)
	rm -f $(ALL_OBJS)
	rm -f $(EXECUTABLE)
	@echo "$(GREEN)‚úÖ Limpieza completada$(RESET)"

# Deep clean (including backup files)
distclean: clean
	@echo "$(YELLOW)üßπ Limpieza profunda...$(RESET)"
	find . -name "*.bak" -delete 2>/dev/null || true
	find . -name "*~" -delete 2>/dev/null || true
	find . -name "*.tmp" -delete 2>/dev/null || true

# Show help
help:
	@echo "$(CYAN)üìñ HULK Compiler - Comandos disponibles:$(RESET)"
	@echo "$(GREEN)  make all$(RESET)                 - Mostrar info y compilar"
	@echo "$(GREEN)  make compile$(RESET)             - Compilar el proyecto"
	@echo "$(GREEN)  make test$(RESET)                - Compilar y ejecutar prueba"
	@echo "$(GREEN)  make clean$(RESET)               - Limpiar archivos generados"
	@echo "$(GREEN)  make distclean$(RESET)           - Limpieza profunda"
	@echo "$(GREEN)  make check-env$(RESET)           - Verificar entorno"
	@echo "$(GREEN)  make install-llvm-msys2$(RESET)  - Instalar LLVM en MSYS2"
	@echo "$(GREEN)  make help$(RESET)                - Mostrar esta ayuda"
	@echo ""
	@echo "$(YELLOW)üí° Para mejor experiencia, usa MSYS2 MinGW 64-bit terminal$(RESET)"

# Phony targets
.PHONY: all compile test clean distclean help info check-env install-llvm-msys2

# Dependencies
$(MAIN_OBJ): $(PARSER_GEN_HPP)
$(LEXER_OBJ): $(PARSER_GEN_HPP)

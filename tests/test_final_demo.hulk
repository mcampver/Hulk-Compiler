// HULK Compiler Enhanced - Demostración completa de características

// 1. Operadores básicos y comparaciones
print("=== Operadores Básicos ===");
print(4 > 3);
print(4 == 4);
print("test" == "test");
print(true != false);

// 2. Nuevos operadores aritméticos
print("=== Nuevos Operadores Aritméticos ===");
print(17 // 3);        // División entera: 5
print((-10) %% 3);     // Módulo mejorado: 2
print(4 +++ 6);        // Triple suma: 20

// 3. Operadores lógicos
print("=== Operadores Lógicos ===");
print(true & false);   // AND simple: false
print(false | true);   // OR simple: true
print(!false);         // NOT: true
print(true && false);  // AND doble: false
print(false || true);  // OR doble: true

// 4. Concatenación
print("=== Concatenación ===");
print("Hola" @ "Mundo");         // Concatenación: "HolaMundo"
print("Hola" @@ "Mundo");        // Con espacio: "Hola Mundo"
print("A" +++ "B");              // Triple concatenación: "ABABAB"

// 5. Funciones built-in nuevas
print("=== Funciones Built-in ===");
let x = 42 in {
    debug(x);                     // Debug información
    print(type(x));              // Tipo: "Number"
    assert(x > 0, "x positivo"); // Assertion
};

// 6. Funciones matemáticas
print("=== Funciones Matemáticas ===");
print(sqrt(16));
print(sin(0));
print(2 ^ 3);
print(2 ** 4);

// 7. Control de flujo con nuevos operadores
print("=== Control de Flujo ===");
if (5 // 2 == 2) {
    print("División entera funciona");
} else {
    print("Error en división entera");
};

let result = if (true & !false) "Lógica correcta" else "Error lógico" in {
    print(result);
};

// 8. Función personalizada usando nuevos operadores
function modPositivo(a, b) => a %% b;

let mod = modPositivo(-7, 3) in {
    print("Módulo positivo de -7 y 3: " @ mod);
    debug(mod);
};

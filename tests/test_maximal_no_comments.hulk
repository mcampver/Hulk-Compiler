type ComplexEntity {
    id = 1001;
    name = "Entity_Alpha";
    isActive = true;
    coefficient = 3.14159;
    
    getFullInfo() => "ID:" @ self.id @ ",Name:" @ self.name @ ",Active:" @ self.isActive @ ",Coef:" @ self.coefficient;
    
    calculateHash() => self.id * 17 + (if self.isActive then 100 else 0);
    
    getComplexCalc() => (self.id + 50) * (if self.coefficient > 3.0 then 2 else 1) + (if self.isActive then self.id else 0);
}

type StateMachine {
    state = 0;
    multiplier = 2;
    accumulator = 10;
    
    processState() => self.state := self.state + self.multiplier * (self.accumulator / 5);
    
    getAdvancedValue() => self.processState() + (self.state * self.multiplier);
    
    determineStatus() => if self.state > 20 then "HIGH" else (if self.state > 10 then "MEDIUM" else "LOW");
    
    chainedOperation() => self.processState() + self.getAdvancedValue() + (if self.determineStatus() == "HIGH" then 100 else 50);
}

type MathProcessor {
    base = 5;
    exponent = 3;
    offset = 7;
    
    power() => self.base * self.base * self.base;
    
    complexFormula() => (self.power() + self.offset) * 2 - (self.base + self.exponent);
    
    conditionalMath() => if self.base > self.exponent then self.power() + self.offset else self.offset - self.base;
    
    megaCalculation() => self.base + self.exponent + self.offset + self.power() + self.complexFormula() + self.conditionalMath();
}

type TextProcessor {
    prefix = ">>>";
    suffix = "<<<";
    content = "CORE";
    separator = "|";
    
    buildMessage() => self.prefix @ self.content @ self.separator @ self.content @ self.suffix;
    
    createHeader() => "START" @ self.separator @ self.buildMessage() @ self.separator @ "END";
    
    formatOutput() => if self.content == "CORE" then self.createHeader() else self.buildMessage();
    
    generateReport() => self.prefix @ "REPORT" @ self.separator @ self.formatOutput() @ self.separator @ "SIZE:" @ (1 + 2 + 3) @ self.suffix;
}

type Counter {
    value = 0;
    step = 1;
    
    increment() => self.value := self.value + self.step;
    getValue() => self.value;
    setStep(newStep) => self.step := newStep;
}

{
    print("=== HULK TYPE SYSTEM MAXIMAL STRESS TEST ===");
    
    let entity = new ComplexEntity() in {
        print("ComplexEntity Test:");
        print(entity.getFullInfo());
        print("Hash: " @ entity.calculateHash());
        print("Complex Calc: " @ entity.getComplexCalc());
        print("");
    };
    
    let machine = new StateMachine() in {
        print("StateMachine Test:");
        print("Initial state: " @ machine.state);
        print("Process result: " @ machine.processState());
        print("Advanced value: " @ machine.getAdvancedValue());
        print("Status: " @ machine.determineStatus());
        print("Chained operation: " @ machine.chainedOperation());
        print("Final state: " @ machine.state);
        print("");
    };
    
    let math = new MathProcessor() in {
        print("MathProcessor Test:");
        print("Base: " @ math.base @ ", Exponent: " @ math.exponent @ ", Offset: " @ math.offset);
        print("Power: " @ math.power());
        print("Complex formula: " @ math.complexFormula());
        print("Conditional math: " @ math.conditionalMath());
        print("MEGA calculation: " @ math.megaCalculation());
        print("");
    };
    
    let text = new TextProcessor() in {
        print("TextProcessor Test:");
        print("Message: " @ text.buildMessage());
        print("Header: " @ text.createHeader());
        print("Formatted: " @ text.formatOutput());
        print("Report: " @ text.generateReport());
        print("");
    };
    
    let counter1 = new Counter() in
    let counter2 = new Counter() in {
        print("Multiple Instances Test:");
        
        counter1.setStep(5);
        counter2.setStep(10);
        
        print("Counter1 initial: " @ counter1.getValue());
        print("Counter2 initial: " @ counter2.getValue());
        
        counter1.increment();
        counter1.increment();
        counter2.increment();
        
        print("Counter1 after 2 increments (step 5): " @ counter1.getValue());
        print("Counter2 after 1 increment (step 10): " @ counter2.getValue());
        
        print("Combined value: " @ (counter1.getValue() + counter2.getValue()));
        print("");
    };
    
    let ultimate = new ComplexEntity() in
    let processor = new MathProcessor() in {
        print("ULTIMATE STRESS TEST:");
        
        let combined = ultimate.id + processor.base * 2 in
        print("Combined calculation: " @ combined);
        
        let megaResult = ultimate.calculateHash() + processor.megaCalculation() in
        print("Mega result: " @ megaResult);
        
        let complexCondition = if ultimate.isActive then processor.complexFormula() else ultimate.id in
        print("Complex condition result: " @ complexCondition);
        
        print("=== ALL TESTS COMPLETED SUCCESSFULLY ===");
    };
}
